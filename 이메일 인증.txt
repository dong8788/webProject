(1) pom.xml에 dependency 추가

        <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>mail</artifactId>
            <version>1.4.7</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring-framework.version}</version>
        </dependency>

(2) spring 하위폴더로 email 생성 후 email 폴더 안에 email-config.xml, email.properties 생성

----------email-config.xml------------------

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.2.xsd">
 
    <context:property-placeholder location="classpath:spring/email/email.properties"/>
 
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.gmail.com" />
        <property name="port" value="465" />
        <property name="username" value="${email.account}" />
        <property name="password" value="${email.password}" />
        
        <property name="javaMailProperties">
            <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                <prop key="ail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
            </props>
        </property>
    </bean>
</beans>

-------------email.properties--------------

email.account=사용자ID@gamil.com
email.password=사용자 비밀번호



(3) web.xml에 email-config.xml을 추가등록 

(4) MailHandler.java 생성

import java.io.UnsupportedEncodingException;
 
import javax.activation.DataSource;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
 
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
 
public class MailHandler {
    private JavaMailSender mailSender;
    private MimeMessage msg;
    private MimeMessageHelper msgHelper;
 
    public MailHandler(JavaMailSender mailSender) throws MessagingException {
        this.mailSender = mailSender;
        msg = this.mailSender.createMimeMessage();
        msgHelper = new MimeMessageHelper(msg, true, "UTF-8");
    }
    
    // Email Title
    public void setSubject(String subject) throws MessagingException {
        msgHelper.setSubject(subject);
    }
    
    // Email Content(Text)
    public void setText(String htmlContent) throws MessagingException {
        msgHelper.setText(htmlContent, true);
    }
    
    // Sender Info
    public void setFrom(String email, String name) throws UnsupportedEncodingException, MessagingException {
        msgHelper.setFrom(email, name);
    }
    
    // Recipient Info
    public void setTo(String email) throws MessagingException {
        msgHelper.setTo(email);
    }
    
    public void addInline(String cotentId, DataSource dataSource) throws MessagingException {
        msgHelper.addInline(cotentId, dataSource);
    }
    
    public void send() {
        try {
            mailSender.send(msg);
        }catch (Exception e) {
            e.printStackTrace();
        }
    }
}

(5) Tempkey.java 생성 ---(인증키를 생성하는 클래스)


public class TempKey {
    private char[] keySet = new char[] { 
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
            'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
            'U', 'V', 'W', 'X', 'Y', 'Z',
            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
            'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
            'u', 'v', 'w', 'x', 'y', 'z'};
 
    public String generateKey(int keyLength) {
        StringBuffer sb = new StringBuffer();
        
        for (int i = 0 ; i < keyLength ; i++) {
            
            int idx = (int) (keySet.length * Math.random()); // 62 * 생성된 난수를 Int로 추출 (소숫점제거)
            sb.append(keySet[idx]);
        }
        return sb.toString();
    }
}


(6) Controller 작성

@Controller
public class SignController {
    private final String HOME = "redirect:/";
    private final String SIGN_UP_VIEW = "sign/sign-up";
    private final String EMAIL_CONFIRM_VIEW = "sign/emailConfirm";
 
    @Autowired
    private MemberService memberSvc;
 
    @RequestMapping(value = "/sign-up", method = RequestMethod.GET)
    public String regist() throws Exception {
        return SIGN_UP_VIEW;
    }
 
    @RequestMapping(value = "/sign-up", method = RequestMethod.POST)
    public String regist(Member user, RedirectAttributes rttr) throws Exception{
    
        System.out.println("regesterPost 진입 ");
        memberSvc.regist(user);
        rttr.addFlashAttribute("msg" , "가입시 사용한 이메일로 인증해주세요");
        return HOME;
    }
 
    // confirm email authKey
    @RequestMapping(value = "/emailConfirm", method = RequestMethod.GET)
    public String emailConfirm(@RequestParam("authKey")String authkey, 
                                Model model, RedirectAttributes rttr) throws Exception { 
        
        if(authkey == null) {
            rttr.addFlashAttribute("msg", "인증키가 잘못되었습니다. 다시 인증해 주세요");
            return HOME;
        }
        
        Member member = memberSvc.userAuth(authkey);
        if(member == null) {
            rttr.addFlashAttribute("msg", "잘못된 접근 입니다. 다시 인증해 주세요");
            return HOME;
        }
        model.addAttribute("user", member.getUser_name());
        return EMAIL_CONFIRM_VIEW;
    }
}


(7) Service 작성

@Service
public class MemberService {
 
    @Autowired
    private MemberDAO dao;
    @Autowired
    private JavaMailSender mailSender;
    
//    ------------------------------------- Member --------------------------------------
    public void regist(Member member) throws Exception {
        String key = new TempKey().generateKey(30);  // 인증키 생성
        member.setAuthkey(key);
        System.out.println("key : " + key);
        
        //DB에 가입정보등록
        dao.signUp(member);
        
        //메일 전송
        MailHandler sendMail = new MailHandler(mailSender);
        sendMail.setSubject("서비스 이메일 인증");
        sendMail.setText(
                new StringBuffer()
                .append("<h1>메일인증</h1>")
                .append("<a href='http://localhost:8080/email_test/emailConfirm?authKey=")
                .append(key)
                .append("' target='_blank'>이메일 인증 확인</a>")
                .toString());
        
        sendMail.setFrom("서비스ID@gmail.com", "서비스 이름");
        sendMail.setTo(member.getEmail());
        sendMail.send();
    }
 
    //이메일 인증 키 검증
    public Member userAuth(String authkey) throws Exception {
        Member member = new Member();
        member = dao.chkAuth(authkey);
   
        if(member!=null){
            try{
                dao.successAuthkey(member);
            }catch (Exception e) {
                e.printStackTrace();
            }
        }
        return member;
    }
}


(8) DAO 작성

@Repository
public class MemberDAO {
    
    @Autowired
    private SqlSessionTemplate sqlSession;
    
    private String nameSpace = "member.model.MemberMapper";
 
//    ------------------------------------- Member --------------------------------------
    //가입
    public void signUp(Member member) throws Exception {
        sqlSession.insert(nameSpace+".insertUser", member);
    }
    
    //email 중복 확인
    public Member checkEmail(String email) throws Exception {
        return sqlSession.selectOne(nameSpace+".chkEmail", email);
    }
 
    //이메일 인증 코드 확인
    public Member chkAuth(String authkey) throws Exception {
        return sqlSession.selectOne(nameSpace + ".chkAuthkey", authkey);
    }
    
    //인증 후 계정 활성화
    public void successAuthkey(Member member) throws Exception {
        sqlSession.update(nameSpace + ".keyConfirm", member);
    }
}















